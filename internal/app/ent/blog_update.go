// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/peanut-cc/goBlog/internal/app/ent/blog"
	"github.com/peanut-cc/goBlog/internal/app/ent/predicate"
)

// BlogUpdate is the builder for updating Blog entities.
type BlogUpdate struct {
	config
	hooks      []Hook
	mutation   *BlogMutation
	predicates []predicate.Blog
}

// Where adds a new predicate for the builder.
func (bu *BlogUpdate) Where(ps ...predicate.Blog) *BlogUpdate {
	bu.predicates = append(bu.predicates, ps...)
	return bu
}

// SetDefaultPageNum sets the default_page_num field.
func (bu *BlogUpdate) SetDefaultPageNum(i int) *BlogUpdate {
	bu.mutation.ResetDefaultPageNum()
	bu.mutation.SetDefaultPageNum(i)
	return bu
}

// AddDefaultPageNum adds i to default_page_num.
func (bu *BlogUpdate) AddDefaultPageNum(i int) *BlogUpdate {
	bu.mutation.AddDefaultPageNum(i)
	return bu
}

// SetBlogName sets the blog_name field.
func (bu *BlogUpdate) SetBlogName(s string) *BlogUpdate {
	bu.mutation.SetBlogName(s)
	return bu
}

// SetBtitle sets the btitle field.
func (bu *BlogUpdate) SetBtitle(s string) *BlogUpdate {
	bu.mutation.SetBtitle(s)
	return bu
}

// SetSubtitle sets the subtitle field.
func (bu *BlogUpdate) SetSubtitle(s string) *BlogUpdate {
	bu.mutation.SetSubtitle(s)
	return bu
}

// SetBeian sets the beian field.
func (bu *BlogUpdate) SetBeian(s string) *BlogUpdate {
	bu.mutation.SetBeian(s)
	return bu
}

// SetCopyRight sets the copy_right field.
func (bu *BlogUpdate) SetCopyRight(s string) *BlogUpdate {
	bu.mutation.SetCopyRight(s)
	return bu
}

// Mutation returns the BlogMutation object of the builder.
func (bu *BlogUpdate) Mutation() *BlogMutation {
	return bu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (bu *BlogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BlogUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BlogUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BlogUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BlogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   blog.Table,
			Columns: blog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blog.FieldID,
			},
		},
	}
	if ps := bu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.DefaultPageNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: blog.FieldDefaultPageNum,
		})
	}
	if value, ok := bu.mutation.AddedDefaultPageNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: blog.FieldDefaultPageNum,
		})
	}
	if value, ok := bu.mutation.BlogName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blog.FieldBlogName,
		})
	}
	if value, ok := bu.mutation.Btitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blog.FieldBtitle,
		})
	}
	if value, ok := bu.mutation.Subtitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blog.FieldSubtitle,
		})
	}
	if value, ok := bu.mutation.Beian(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blog.FieldBeian,
		})
	}
	if value, ok := bu.mutation.CopyRight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blog.FieldCopyRight,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blog.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BlogUpdateOne is the builder for updating a single Blog entity.
type BlogUpdateOne struct {
	config
	hooks    []Hook
	mutation *BlogMutation
}

// SetDefaultPageNum sets the default_page_num field.
func (buo *BlogUpdateOne) SetDefaultPageNum(i int) *BlogUpdateOne {
	buo.mutation.ResetDefaultPageNum()
	buo.mutation.SetDefaultPageNum(i)
	return buo
}

// AddDefaultPageNum adds i to default_page_num.
func (buo *BlogUpdateOne) AddDefaultPageNum(i int) *BlogUpdateOne {
	buo.mutation.AddDefaultPageNum(i)
	return buo
}

// SetBlogName sets the blog_name field.
func (buo *BlogUpdateOne) SetBlogName(s string) *BlogUpdateOne {
	buo.mutation.SetBlogName(s)
	return buo
}

// SetBtitle sets the btitle field.
func (buo *BlogUpdateOne) SetBtitle(s string) *BlogUpdateOne {
	buo.mutation.SetBtitle(s)
	return buo
}

// SetSubtitle sets the subtitle field.
func (buo *BlogUpdateOne) SetSubtitle(s string) *BlogUpdateOne {
	buo.mutation.SetSubtitle(s)
	return buo
}

// SetBeian sets the beian field.
func (buo *BlogUpdateOne) SetBeian(s string) *BlogUpdateOne {
	buo.mutation.SetBeian(s)
	return buo
}

// SetCopyRight sets the copy_right field.
func (buo *BlogUpdateOne) SetCopyRight(s string) *BlogUpdateOne {
	buo.mutation.SetCopyRight(s)
	return buo
}

// Mutation returns the BlogMutation object of the builder.
func (buo *BlogUpdateOne) Mutation() *BlogMutation {
	return buo.mutation
}

// Save executes the query and returns the updated entity.
func (buo *BlogUpdateOne) Save(ctx context.Context) (*Blog, error) {
	var (
		err  error
		node *Blog
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BlogUpdateOne) SaveX(ctx context.Context) *Blog {
	b, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return b
}

// Exec executes the query on the entity.
func (buo *BlogUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BlogUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BlogUpdateOne) sqlSave(ctx context.Context) (b *Blog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   blog.Table,
			Columns: blog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blog.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Blog.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := buo.mutation.DefaultPageNum(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: blog.FieldDefaultPageNum,
		})
	}
	if value, ok := buo.mutation.AddedDefaultPageNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: blog.FieldDefaultPageNum,
		})
	}
	if value, ok := buo.mutation.BlogName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blog.FieldBlogName,
		})
	}
	if value, ok := buo.mutation.Btitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blog.FieldBtitle,
		})
	}
	if value, ok := buo.mutation.Subtitle(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blog.FieldSubtitle,
		})
	}
	if value, ok := buo.mutation.Beian(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blog.FieldBeian,
		})
	}
	if value, ok := buo.mutation.CopyRight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blog.FieldCopyRight,
		})
	}
	b = &Blog{config: buo.config}
	_spec.Assign = b.assignValues
	_spec.ScanValues = b.scanValues()
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blog.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return b, nil
}
