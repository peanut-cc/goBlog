// Code generated by entc, DO NOT EDIT.

package blog

import (
	"github.com/facebook/ent/dialect/sql"
	"github.com/peanut-cc/goBlog/internal/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// DefaultPageNum applies equality check predicate on the "default_page_num" field. It's identical to DefaultPageNumEQ.
func DefaultPageNum(v int) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultPageNum), v))
	})
}

// BlogName applies equality check predicate on the "blog_name" field. It's identical to BlogNameEQ.
func BlogName(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlogName), v))
	})
}

// Btitle applies equality check predicate on the "btitle" field. It's identical to BtitleEQ.
func Btitle(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBtitle), v))
	})
}

// Subtitle applies equality check predicate on the "subtitle" field. It's identical to SubtitleEQ.
func Subtitle(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubtitle), v))
	})
}

// Beian applies equality check predicate on the "beian" field. It's identical to BeianEQ.
func Beian(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBeian), v))
	})
}

// CopyRight applies equality check predicate on the "copy_right" field. It's identical to CopyRightEQ.
func CopyRight(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCopyRight), v))
	})
}

// DefaultPageNumEQ applies the EQ predicate on the "default_page_num" field.
func DefaultPageNumEQ(v int) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDefaultPageNum), v))
	})
}

// DefaultPageNumNEQ applies the NEQ predicate on the "default_page_num" field.
func DefaultPageNumNEQ(v int) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDefaultPageNum), v))
	})
}

// DefaultPageNumIn applies the In predicate on the "default_page_num" field.
func DefaultPageNumIn(vs ...int) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDefaultPageNum), v...))
	})
}

// DefaultPageNumNotIn applies the NotIn predicate on the "default_page_num" field.
func DefaultPageNumNotIn(vs ...int) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDefaultPageNum), v...))
	})
}

// DefaultPageNumGT applies the GT predicate on the "default_page_num" field.
func DefaultPageNumGT(v int) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDefaultPageNum), v))
	})
}

// DefaultPageNumGTE applies the GTE predicate on the "default_page_num" field.
func DefaultPageNumGTE(v int) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDefaultPageNum), v))
	})
}

// DefaultPageNumLT applies the LT predicate on the "default_page_num" field.
func DefaultPageNumLT(v int) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDefaultPageNum), v))
	})
}

// DefaultPageNumLTE applies the LTE predicate on the "default_page_num" field.
func DefaultPageNumLTE(v int) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDefaultPageNum), v))
	})
}

// BlogNameEQ applies the EQ predicate on the "blog_name" field.
func BlogNameEQ(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlogName), v))
	})
}

// BlogNameNEQ applies the NEQ predicate on the "blog_name" field.
func BlogNameNEQ(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBlogName), v))
	})
}

// BlogNameIn applies the In predicate on the "blog_name" field.
func BlogNameIn(vs ...string) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBlogName), v...))
	})
}

// BlogNameNotIn applies the NotIn predicate on the "blog_name" field.
func BlogNameNotIn(vs ...string) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBlogName), v...))
	})
}

// BlogNameGT applies the GT predicate on the "blog_name" field.
func BlogNameGT(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBlogName), v))
	})
}

// BlogNameGTE applies the GTE predicate on the "blog_name" field.
func BlogNameGTE(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBlogName), v))
	})
}

// BlogNameLT applies the LT predicate on the "blog_name" field.
func BlogNameLT(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBlogName), v))
	})
}

// BlogNameLTE applies the LTE predicate on the "blog_name" field.
func BlogNameLTE(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBlogName), v))
	})
}

// BlogNameContains applies the Contains predicate on the "blog_name" field.
func BlogNameContains(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBlogName), v))
	})
}

// BlogNameHasPrefix applies the HasPrefix predicate on the "blog_name" field.
func BlogNameHasPrefix(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBlogName), v))
	})
}

// BlogNameHasSuffix applies the HasSuffix predicate on the "blog_name" field.
func BlogNameHasSuffix(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBlogName), v))
	})
}

// BlogNameEqualFold applies the EqualFold predicate on the "blog_name" field.
func BlogNameEqualFold(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBlogName), v))
	})
}

// BlogNameContainsFold applies the ContainsFold predicate on the "blog_name" field.
func BlogNameContainsFold(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBlogName), v))
	})
}

// BtitleEQ applies the EQ predicate on the "btitle" field.
func BtitleEQ(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBtitle), v))
	})
}

// BtitleNEQ applies the NEQ predicate on the "btitle" field.
func BtitleNEQ(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBtitle), v))
	})
}

// BtitleIn applies the In predicate on the "btitle" field.
func BtitleIn(vs ...string) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBtitle), v...))
	})
}

// BtitleNotIn applies the NotIn predicate on the "btitle" field.
func BtitleNotIn(vs ...string) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBtitle), v...))
	})
}

// BtitleGT applies the GT predicate on the "btitle" field.
func BtitleGT(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBtitle), v))
	})
}

// BtitleGTE applies the GTE predicate on the "btitle" field.
func BtitleGTE(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBtitle), v))
	})
}

// BtitleLT applies the LT predicate on the "btitle" field.
func BtitleLT(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBtitle), v))
	})
}

// BtitleLTE applies the LTE predicate on the "btitle" field.
func BtitleLTE(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBtitle), v))
	})
}

// BtitleContains applies the Contains predicate on the "btitle" field.
func BtitleContains(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBtitle), v))
	})
}

// BtitleHasPrefix applies the HasPrefix predicate on the "btitle" field.
func BtitleHasPrefix(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBtitle), v))
	})
}

// BtitleHasSuffix applies the HasSuffix predicate on the "btitle" field.
func BtitleHasSuffix(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBtitle), v))
	})
}

// BtitleEqualFold applies the EqualFold predicate on the "btitle" field.
func BtitleEqualFold(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBtitle), v))
	})
}

// BtitleContainsFold applies the ContainsFold predicate on the "btitle" field.
func BtitleContainsFold(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBtitle), v))
	})
}

// SubtitleEQ applies the EQ predicate on the "subtitle" field.
func SubtitleEQ(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubtitle), v))
	})
}

// SubtitleNEQ applies the NEQ predicate on the "subtitle" field.
func SubtitleNEQ(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubtitle), v))
	})
}

// SubtitleIn applies the In predicate on the "subtitle" field.
func SubtitleIn(vs ...string) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubtitle), v...))
	})
}

// SubtitleNotIn applies the NotIn predicate on the "subtitle" field.
func SubtitleNotIn(vs ...string) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubtitle), v...))
	})
}

// SubtitleGT applies the GT predicate on the "subtitle" field.
func SubtitleGT(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubtitle), v))
	})
}

// SubtitleGTE applies the GTE predicate on the "subtitle" field.
func SubtitleGTE(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubtitle), v))
	})
}

// SubtitleLT applies the LT predicate on the "subtitle" field.
func SubtitleLT(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubtitle), v))
	})
}

// SubtitleLTE applies the LTE predicate on the "subtitle" field.
func SubtitleLTE(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubtitle), v))
	})
}

// SubtitleContains applies the Contains predicate on the "subtitle" field.
func SubtitleContains(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubtitle), v))
	})
}

// SubtitleHasPrefix applies the HasPrefix predicate on the "subtitle" field.
func SubtitleHasPrefix(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubtitle), v))
	})
}

// SubtitleHasSuffix applies the HasSuffix predicate on the "subtitle" field.
func SubtitleHasSuffix(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubtitle), v))
	})
}

// SubtitleEqualFold applies the EqualFold predicate on the "subtitle" field.
func SubtitleEqualFold(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubtitle), v))
	})
}

// SubtitleContainsFold applies the ContainsFold predicate on the "subtitle" field.
func SubtitleContainsFold(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubtitle), v))
	})
}

// BeianEQ applies the EQ predicate on the "beian" field.
func BeianEQ(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBeian), v))
	})
}

// BeianNEQ applies the NEQ predicate on the "beian" field.
func BeianNEQ(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBeian), v))
	})
}

// BeianIn applies the In predicate on the "beian" field.
func BeianIn(vs ...string) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBeian), v...))
	})
}

// BeianNotIn applies the NotIn predicate on the "beian" field.
func BeianNotIn(vs ...string) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBeian), v...))
	})
}

// BeianGT applies the GT predicate on the "beian" field.
func BeianGT(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBeian), v))
	})
}

// BeianGTE applies the GTE predicate on the "beian" field.
func BeianGTE(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBeian), v))
	})
}

// BeianLT applies the LT predicate on the "beian" field.
func BeianLT(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBeian), v))
	})
}

// BeianLTE applies the LTE predicate on the "beian" field.
func BeianLTE(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBeian), v))
	})
}

// BeianContains applies the Contains predicate on the "beian" field.
func BeianContains(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBeian), v))
	})
}

// BeianHasPrefix applies the HasPrefix predicate on the "beian" field.
func BeianHasPrefix(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBeian), v))
	})
}

// BeianHasSuffix applies the HasSuffix predicate on the "beian" field.
func BeianHasSuffix(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBeian), v))
	})
}

// BeianEqualFold applies the EqualFold predicate on the "beian" field.
func BeianEqualFold(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBeian), v))
	})
}

// BeianContainsFold applies the ContainsFold predicate on the "beian" field.
func BeianContainsFold(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBeian), v))
	})
}

// CopyRightEQ applies the EQ predicate on the "copy_right" field.
func CopyRightEQ(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCopyRight), v))
	})
}

// CopyRightNEQ applies the NEQ predicate on the "copy_right" field.
func CopyRightNEQ(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCopyRight), v))
	})
}

// CopyRightIn applies the In predicate on the "copy_right" field.
func CopyRightIn(vs ...string) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCopyRight), v...))
	})
}

// CopyRightNotIn applies the NotIn predicate on the "copy_right" field.
func CopyRightNotIn(vs ...string) predicate.Blog {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Blog(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCopyRight), v...))
	})
}

// CopyRightGT applies the GT predicate on the "copy_right" field.
func CopyRightGT(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCopyRight), v))
	})
}

// CopyRightGTE applies the GTE predicate on the "copy_right" field.
func CopyRightGTE(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCopyRight), v))
	})
}

// CopyRightLT applies the LT predicate on the "copy_right" field.
func CopyRightLT(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCopyRight), v))
	})
}

// CopyRightLTE applies the LTE predicate on the "copy_right" field.
func CopyRightLTE(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCopyRight), v))
	})
}

// CopyRightContains applies the Contains predicate on the "copy_right" field.
func CopyRightContains(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCopyRight), v))
	})
}

// CopyRightHasPrefix applies the HasPrefix predicate on the "copy_right" field.
func CopyRightHasPrefix(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCopyRight), v))
	})
}

// CopyRightHasSuffix applies the HasSuffix predicate on the "copy_right" field.
func CopyRightHasSuffix(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCopyRight), v))
	})
}

// CopyRightEqualFold applies the EqualFold predicate on the "copy_right" field.
func CopyRightEqualFold(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCopyRight), v))
	})
}

// CopyRightContainsFold applies the ContainsFold predicate on the "copy_right" field.
func CopyRightContainsFold(v string) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCopyRight), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Blog) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Blog) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Blog) predicate.Blog {
	return predicate.Blog(func(s *sql.Selector) {
		p(s.Not())
	})
}
