// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/peanut-cc/goBlog/internal/app/ent/blog"
)

// BlogCreate is the builder for creating a Blog entity.
type BlogCreate struct {
	config
	mutation *BlogMutation
	hooks    []Hook
}

// SetDefaultPageNum sets the default_page_num field.
func (bc *BlogCreate) SetDefaultPageNum(i int) *BlogCreate {
	bc.mutation.SetDefaultPageNum(i)
	return bc
}

// SetBlogName sets the blog_name field.
func (bc *BlogCreate) SetBlogName(s string) *BlogCreate {
	bc.mutation.SetBlogName(s)
	return bc
}

// SetBtitle sets the btitle field.
func (bc *BlogCreate) SetBtitle(s string) *BlogCreate {
	bc.mutation.SetBtitle(s)
	return bc
}

// SetSubtitle sets the subtitle field.
func (bc *BlogCreate) SetSubtitle(s string) *BlogCreate {
	bc.mutation.SetSubtitle(s)
	return bc
}

// SetBeian sets the beian field.
func (bc *BlogCreate) SetBeian(s string) *BlogCreate {
	bc.mutation.SetBeian(s)
	return bc
}

// SetCopyRight sets the copy_right field.
func (bc *BlogCreate) SetCopyRight(s string) *BlogCreate {
	bc.mutation.SetCopyRight(s)
	return bc
}

// Mutation returns the BlogMutation object of the builder.
func (bc *BlogCreate) Mutation() *BlogMutation {
	return bc.mutation
}

// Save creates the Blog in the database.
func (bc *BlogCreate) Save(ctx context.Context) (*Blog, error) {
	if err := bc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *Blog
	)
	if len(bc.hooks) == 0 {
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bc.mutation = mutation
			node, err = bc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BlogCreate) SaveX(ctx context.Context) *Blog {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bc *BlogCreate) preSave() error {
	if _, ok := bc.mutation.DefaultPageNum(); !ok {
		return &ValidationError{Name: "default_page_num", err: errors.New("ent: missing required field \"default_page_num\"")}
	}
	if _, ok := bc.mutation.BlogName(); !ok {
		return &ValidationError{Name: "blog_name", err: errors.New("ent: missing required field \"blog_name\"")}
	}
	if _, ok := bc.mutation.Btitle(); !ok {
		return &ValidationError{Name: "btitle", err: errors.New("ent: missing required field \"btitle\"")}
	}
	if _, ok := bc.mutation.Subtitle(); !ok {
		return &ValidationError{Name: "subtitle", err: errors.New("ent: missing required field \"subtitle\"")}
	}
	if _, ok := bc.mutation.Beian(); !ok {
		return &ValidationError{Name: "beian", err: errors.New("ent: missing required field \"beian\"")}
	}
	if _, ok := bc.mutation.CopyRight(); !ok {
		return &ValidationError{Name: "copy_right", err: errors.New("ent: missing required field \"copy_right\"")}
	}
	return nil
}

func (bc *BlogCreate) sqlSave(ctx context.Context) (*Blog, error) {
	b, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	b.ID = int(id)
	return b, nil
}

func (bc *BlogCreate) createSpec() (*Blog, *sqlgraph.CreateSpec) {
	var (
		b     = &Blog{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: blog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blog.FieldID,
			},
		}
	)
	if value, ok := bc.mutation.DefaultPageNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: blog.FieldDefaultPageNum,
		})
		b.DefaultPageNum = value
	}
	if value, ok := bc.mutation.BlogName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blog.FieldBlogName,
		})
		b.BlogName = value
	}
	if value, ok := bc.mutation.Btitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blog.FieldBtitle,
		})
		b.Btitle = value
	}
	if value, ok := bc.mutation.Subtitle(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blog.FieldSubtitle,
		})
		b.Subtitle = value
	}
	if value, ok := bc.mutation.Beian(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blog.FieldBeian,
		})
		b.Beian = value
	}
	if value, ok := bc.mutation.CopyRight(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blog.FieldCopyRight,
		})
		b.CopyRight = value
	}
	return b, _spec
}

// BlogCreateBulk is the builder for creating a bulk of Blog entities.
type BlogCreateBulk struct {
	config
	builders []*BlogCreate
}

// Save creates the Blog entities in the database.
func (bcb *BlogCreateBulk) Save(ctx context.Context) ([]*Blog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Blog, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*BlogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (bcb *BlogCreateBulk) SaveX(ctx context.Context) []*Blog {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
