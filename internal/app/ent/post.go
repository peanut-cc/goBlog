// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/peanut-cc/goBlog/internal/app/ent/category"
	"github.com/peanut-cc/goBlog/internal/app/ent/post"
)

// Post is the model entity for the Post schema.
type Post struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// CreatedTime holds the value of the "created_time" field.
	CreatedTime time.Time `json:"created_time,omitempty"`
	// ModifiedTime holds the value of the "modified_time" field.
	ModifiedTime time.Time `json:"modified_time,omitempty"`
	// Excerpt holds the value of the "excerpt" field.
	Excerpt string `json:"excerpt,omitempty"`
	// Author holds the value of the "author" field.
	Author string `json:"author,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostQuery when eager-loading is set.
	Edges          PostEdges `json:"edges"`
	category_posts *int
}

// PostEdges holds the relations/edges for other nodes in the graph.
type PostEdges struct {
	// Category holds the value of the category edge.
	Category *Category
	// Tags holds the value of the tags edge.
	Tags []*Tag
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostEdges) CategoryOrErr() (*Category, error) {
	if e.loadedTypes[0] {
		if e.Category == nil {
			// The edge category was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: category.Label}
		}
		return e.Category, nil
	}
	return nil, &NotLoadedError{edge: "category"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e PostEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[1] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Post) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // title
		&sql.NullString{}, // body
		&sql.NullTime{},   // created_time
		&sql.NullTime{},   // modified_time
		&sql.NullString{}, // excerpt
		&sql.NullString{}, // author
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Post) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // category_posts
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Post fields.
func (po *Post) assignValues(values ...interface{}) error {
	if m, n := len(values), len(post.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	po.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field title", values[0])
	} else if value.Valid {
		po.Title = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field body", values[1])
	} else if value.Valid {
		po.Body = value.String
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_time", values[2])
	} else if value.Valid {
		po.CreatedTime = value.Time
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field modified_time", values[3])
	} else if value.Valid {
		po.ModifiedTime = value.Time
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field excerpt", values[4])
	} else if value.Valid {
		po.Excerpt = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field author", values[5])
	} else if value.Valid {
		po.Author = value.String
	}
	values = values[6:]
	if len(values) == len(post.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field category_posts", value)
		} else if value.Valid {
			po.category_posts = new(int)
			*po.category_posts = int(value.Int64)
		}
	}
	return nil
}

// QueryCategory queries the category edge of the Post.
func (po *Post) QueryCategory() *CategoryQuery {
	return (&PostClient{config: po.config}).QueryCategory(po)
}

// QueryTags queries the tags edge of the Post.
func (po *Post) QueryTags() *TagQuery {
	return (&PostClient{config: po.config}).QueryTags(po)
}

// Update returns a builder for updating this Post.
// Note that, you need to call Post.Unwrap() before calling this method, if this Post
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Post) Update() *PostUpdateOne {
	return (&PostClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (po *Post) Unwrap() *Post {
	tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Post is not a transactional entity")
	}
	po.config.driver = tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Post) String() string {
	var builder strings.Builder
	builder.WriteString("Post(")
	builder.WriteString(fmt.Sprintf("id=%v", po.ID))
	builder.WriteString(", title=")
	builder.WriteString(po.Title)
	builder.WriteString(", body=")
	builder.WriteString(po.Body)
	builder.WriteString(", created_time=")
	builder.WriteString(po.CreatedTime.Format(time.ANSIC))
	builder.WriteString(", modified_time=")
	builder.WriteString(po.ModifiedTime.Format(time.ANSIC))
	builder.WriteString(", excerpt=")
	builder.WriteString(po.Excerpt)
	builder.WriteString(", author=")
	builder.WriteString(po.Author)
	builder.WriteByte(')')
	return builder.String()
}

// Posts is a parsable slice of Post.
type Posts []*Post

func (po Posts) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
